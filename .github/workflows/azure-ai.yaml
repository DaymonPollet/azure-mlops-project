name: Azure ML Job Pipeline

on:
  workflow_dispatch:

env:
  GROUP: mlops-demo
  WORKSPACE: pollet-daymon-ml
  LOCATION: westeurope

jobs:
  azure-pipeline:
    runs-on: ubuntu-24.04
    steps:
      - name: Check out code repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure test - Get Compute
        uses: azure/CLI@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            az extension add --name ml
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute list

      - name: Azure -- Component Setup
        uses: Azure/CLI@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            az extension add --name ml
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml component create --file ./components/dataprep/dataprep.yaml
            az ml component create --file ./components/dataprep/data_split.yaml
            az ml component create --file ./components/training/training.yaml

      - name: Azure -- Start Training Job
        uses: Azure/CLI@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            az extension add --name ml
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml job create --file ./pipeline.yaml --stream --set name=animals-classification-${{ github.sha }}-${{ github.run_id }}

      - name: Azure -- Stop Compute
        uses: Azure/CLI@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute stop --name cli-created-machine
        continue-on-error: true

  download:
    needs: azure-pipeline
    runs-on: ubuntu-24.04
    outputs:
      model_version: ${{ steps.download_model_version.outputs.MODEL_VERSION }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure -- Download Model
        id: download_model_version
        uses: azure/CLI@v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            VERSION=$(az ml model list -n animal-classification --query "[0].version" -o tsv)
            echo "MODEL_VERSION=$VERSION" >> $GITHUB_OUTPUT
            az ml model download --name animal-classification --version $VERSION

      - name: Docker -- Upload API code from Inference
        uses: actions/upload-artifact@v4.3.3
        with:
          name: docker-config
          path: inference

  deploy:
    needs: download
    runs-on: ubuntu-24.04
    permissions:
      packages: write
      contents: read
    env:
      MODEL_VERSION_FOR_K8S: ${{ needs.download.outputs.model_version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Docker -- Gather Tags
        id: docker-meta-data
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ghcr.io/daymonpollet/mlops-animals-api
          tags: |
            type=ref,event=branch
            type=sha

      - name: Docker -- Login to GHCR
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker -- Download API Code for Inference
        uses: actions/download-artifact@v4.1.7
        with:
          name: docker-config
          path: inference

      - name: Docker Build and push
        id: docker_build
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.docker-meta-data.outputs.tags }}

      - name: Install kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
          sudo mkdir -p /etc/apt/keyrings
          sudo chmod 755 /etc/apt/keyrings
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo bash -c 'gpg --dearmor > /etc/apt/keyrings/kubernetes-apt-keyring.gpg'
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl

      - name: Login to Azure and set AKS context
        run: |
          echo "${{ secrets.AZURE_CREDENTIALS }}" > azure_creds.json
          az login --service-principal --username "$(jq -r .clientId azure_creds.json)" \
                  --password "$(jq -r .clientSecret azure_creds.json)" \
                  --tenant "$(jq -r .tenantId azure_creds.json)"
          az aks get-credentials --resource-group $GROUP --name mlops-aks-cluster --overwrite-existing --admin

      # ðŸ‘‡ don't forget this -> runs kubectl on the host runner, not inside Azure CLI container (cuz kubectl isn't pre-installed there) 

      - name: Verify Kubernetes connection
        run: |
          echo "--- kubectl get nodes output ---"
          kubectl get nodes
          echo "--------------------------------"

      - name: Deploy to Kubernetes with substituted variables
        env:
          GITHUB_SHA: ${{ github.sha }}
          MODEL_VERSION_FOR_K8S: ${{ env.MODEL_VERSION_FOR_K8S }}
        run: |
          echo "Substituting variables into Kubernetes deployment YAML..."
          envsubst < k8s-deployment.yaml | kubectl apply -f -
